
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.9.0
 * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
 */
Prisma.prismaVersion = {
  client: "4.9.0",
  engine: "ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AddressOrderByRelevanceFieldEnum = makeEnum({
  addressID: 'addressID',
  city: 'city',
  province: 'province',
  zipcode: 'zipcode',
  street: 'street',
  profileID: 'profileID',
  companyDetailsID: 'companyDetailsID'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  addressID: 'addressID',
  city: 'city',
  province: 'province',
  zipcode: 'zipcode',
  street: 'street',
  profileID: 'profileID',
  companyDetailsID: 'companyDetailsID'
});

exports.Prisma.ApplicantOrderByRelevanceFieldEnum = makeEnum({
  applicantID: 'applicantID',
  id: 'id',
  email: 'email',
  jobPostID: 'jobPostID',
  interviewerID: 'interviewerID',
  endorsementID: 'endorsementID',
  notificaitonID: 'notificaitonID'
});

exports.Prisma.ApplicantScalarFieldEnum = makeEnum({
  applicantID: 'applicantID',
  id: 'id',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  jobPostID: 'jobPostID',
  interviewerID: 'interviewerID',
  endorsementID: 'endorsementID',
  notificaitonID: 'notificaitonID'
});

exports.Prisma.CommentOrderByRelevanceFieldEnum = makeEnum({
  commentID: 'commentID',
  message: 'message',
  notes: 'notes',
  endorsementID: 'endorsementID',
  userID: 'userID'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  commentID: 'commentID',
  message: 'message',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  endorsementID: 'endorsementID',
  userID: 'userID'
});

exports.Prisma.CompanyDetailsOrderByRelevanceFieldEnum = makeEnum({
  companyDetailsID: 'companyDetailsID',
  description: 'description',
  mission: 'mission',
  vision: 'vision',
  companyID: 'companyID'
});

exports.Prisma.CompanyDetailsScalarFieldEnum = makeEnum({
  companyDetailsID: 'companyDetailsID',
  description: 'description',
  mission: 'mission',
  vision: 'vision',
  companyID: 'companyID'
});

exports.Prisma.CompanyOrderByRelevanceFieldEnum = makeEnum({
  companyID: 'companyID',
  companyName: 'companyName'
});

exports.Prisma.CompanyScalarFieldEnum = makeEnum({
  companyID: 'companyID',
  companyName: 'companyName',
  createdAt: 'createdAt'
});

exports.Prisma.EndorseOrderByRelevanceFieldEnum = makeEnum({
  endorseID: 'endorseID',
  userID: 'userID',
  companyID: 'companyID'
});

exports.Prisma.EndorseScalarFieldEnum = makeEnum({
  endorseID: 'endorseID',
  endorseStatus: 'endorseStatus',
  userID: 'userID',
  createdAt: 'createdAt',
  companyID: 'companyID'
});

exports.Prisma.EndorsementOrderByRelevanceFieldEnum = makeEnum({
  endorsementID: 'endorsementID',
  Status: 'Status',
  userID: 'userID',
  companyID: 'companyID'
});

exports.Prisma.EndorsementScalarFieldEnum = makeEnum({
  endorsementID: 'endorsementID',
  Status: 'Status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userID: 'userID',
  companyID: 'companyID'
});

exports.Prisma.FeedbackOrderByRelevanceFieldEnum = makeEnum({
  feedbackID: 'feedbackID',
  feedback: 'feedback',
  endorseID: 'endorseID',
  userID: 'userID',
  applicantID: 'applicantID'
});

exports.Prisma.FeedbackScalarFieldEnum = makeEnum({
  feedbackID: 'feedbackID',
  feedback: 'feedback',
  createdAt: 'createdAt',
  endorseID: 'endorseID',
  userID: 'userID',
  applicantID: 'applicantID'
});

exports.Prisma.InterviewerOrderByRelevanceFieldEnum = makeEnum({
  interviewerID: 'interviewerID',
  userID: 'userID'
});

exports.Prisma.InterviewerScalarFieldEnum = makeEnum({
  interviewerID: 'interviewerID',
  createdAt: 'createdAt',
  userID: 'userID'
});

exports.Prisma.JobDetailsOrderByRelevanceFieldEnum = makeEnum({
  jobDetailsID: 'jobDetailsID',
  location: 'location',
  jobType: 'jobType',
  workType: 'workType',
  category: 'category',
  salary: 'salary',
  jobPostID: 'jobPostID'
});

exports.Prisma.JobDetailsScalarFieldEnum = makeEnum({
  jobDetailsID: 'jobDetailsID',
  location: 'location',
  jobType: 'jobType',
  workType: 'workType',
  category: 'category',
  salary: 'salary',
  jobPostID: 'jobPostID'
});

exports.Prisma.JobPostOrderByRelevanceFieldEnum = makeEnum({
  jobPostID: 'jobPostID',
  title: 'title',
  description: 'description',
  qualification: 'qualification',
  responsibilities: 'responsibilities',
  companyID: 'companyID',
  notificationID: 'notificationID',
  userID: 'userID'
});

exports.Prisma.JobPostScalarFieldEnum = makeEnum({
  jobPostID: 'jobPostID',
  title: 'title',
  description: 'description',
  qualification: 'qualification',
  responsibilities: 'responsibilities',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyID: 'companyID',
  notificationID: 'notificationID',
  userID: 'userID'
});

exports.Prisma.LogsOrderByRelevanceFieldEnum = makeEnum({
  logsID: 'logsID',
  title: 'title',
  modifiedBy: 'modifiedBy'
});

exports.Prisma.LogsScalarFieldEnum = makeEnum({
  logsID: 'logsID',
  title: 'title',
  modifiedBy: 'modifiedBy',
  createdAt: 'createdAt'
});

exports.Prisma.NotificationOrderByRelevanceFieldEnum = makeEnum({
  notificationID: 'notificationID',
  title: 'title',
  userID: 'userID'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  notificationID: 'notificationID',
  title: 'title',
  notificationStatus: 'notificationStatus',
  createdAt: 'createdAt',
  userID: 'userID'
});

exports.Prisma.OTPOrderByRelevanceFieldEnum = makeEnum({
  OTPID: 'OTPID',
  otp: 'otp'
});

exports.Prisma.OTPScalarFieldEnum = makeEnum({
  OTPID: 'OTPID',
  otp: 'otp',
  createdAt: 'createdAt',
  expiredAt: 'expiredAt'
});

exports.Prisma.ProfileOrderByRelevanceFieldEnum = makeEnum({
  profileID: 'profileID',
  firstname: 'firstname',
  lastname: 'lastname',
  phone: 'phone',
  applicantID: 'applicantID',
  userID: 'userID'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  profileID: 'profileID',
  firstname: 'firstname',
  lastname: 'lastname',
  phone: 'phone',
  birthday: 'birthday',
  applicantID: 'applicantID',
  userID: 'userID'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.ScreeningOrderByRelevanceFieldEnum = makeEnum({
  screeningID: 'screeningID',
  applicantID: 'applicantID',
  userID: 'userID'
});

exports.Prisma.ScreeningScalarFieldEnum = makeEnum({
  screeningID: 'screeningID',
  DateTime: 'DateTime',
  applicantID: 'applicantID',
  userID: 'userID'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UploadFileOrderByRelevanceFieldEnum = makeEnum({
  uploadFileID: 'uploadFileID',
  file: 'file',
  video: 'video',
  applicantID: 'applicantID'
});

exports.Prisma.UploadFileScalarFieldEnum = makeEnum({
  uploadFileID: 'uploadFileID',
  file: 'file',
  video: 'video',
  createdAt: 'createdAt',
  applicantID: 'applicantID'
});

exports.Prisma.UserOrderByRelevanceFieldEnum = makeEnum({
  userID: 'userID',
  email: 'email',
  password: 'password',
  companyID: 'companyID'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  userID: 'userID',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyID: 'companyID'
});
exports.JobStatus = makeEnum({
  inProgress: 'inProgress',
  approved: 'approved',
  rejected: 'rejected'
});

exports.Role = makeEnum({
  administrator: 'administrator',
  recruiter: 'recruiter',
  moderator: 'moderator',
  manager: 'manager',
  employer: 'employer'
});

exports.applicantStatus = makeEnum({
  waiting: 'waiting',
  approved: 'approved',
  rejected: 'rejected'
});

exports.endorseStatus = makeEnum({
  waiting: 'waiting',
  rejected: 'rejected',
  approved: 'approved'
});

exports.notificationStatus = makeEnum({
  read: 'read',
  unread: 'unread'
});

exports.Prisma.ModelName = makeEnum({
  OTP: 'OTP',
  User: 'User',
  Logs: 'Logs',
  Notification: 'Notification',
  Profile: 'Profile',
  Address: 'Address',
  Company: 'Company',
  CompanyDetails: 'CompanyDetails',
  Comment: 'Comment',
  Endorsement: 'Endorsement',
  Endorse: 'Endorse',
  Feedback: 'Feedback',
  Interviewer: 'Interviewer',
  Applicant: 'Applicant',
  Screening: 'Screening',
  UploadFile: 'UploadFile',
  JobPost: 'JobPost',
  JobDetails: 'JobDetails'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
