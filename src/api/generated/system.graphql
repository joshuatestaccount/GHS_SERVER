### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddressInput {
  city: String
  province: String
  street: String
  zipcode: String
}

input AuthInput {
  email: EmailAddress
  password: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

enum FilterOderBy {
  asc
  desc
}

type JobPost {
  _count: Int
  applicants: [application]
  createdAt: Date
  description: String
  details: [jobDetails]
  jobPostID: ID
  qualification: String
  responsibilities: String
  status: String
  title: String
  updatedAt: Date
  users: [user]
}

input JobPostInput {
  description: String
  qualification: String
  responsibilities: String
  title: String
}

type Mutation {
  changeEmailAddress(email: EmailAddress!, retype: EmailAddress, userID: ID!): user
  createAFeedback(applicantID: ID!, endorseID: ID!, feedback: String!, userID: ID!): feedback
  createAJobForAMM(JobDetails: jobDetailsInput, JobPost: JobPostInput, userID: ID!): JobPost
  createAJobForRecruiter(JobDetails: jobDetailsInput, JobPost: JobPostInput, userID: ID!): JobPost
  createAccount(Profile: ProfileInput, auth: AuthInput, companyName: String, role: String!): user
  createAdministrator(Auth: AuthInput, Profile: ProfileInput, companyName: String!): user
  createApplication(Address: AddressInput, Profile: ProfileInput, email: EmailAddress!, file: Upload, jobPostID: ID!, video: Upload): application
  createComment(comments: commentInput, endorsementID: ID!): comment
  createEndorse(companyID: ID!, endorsementID: ID!, userID: ID!): endorse
  createInterviewer(applicantID: ID!, userID: ID!): interviewer
  deleteCompany(companyID: ID!): company
  deleteEndorsement(endorsementID: ID!): endorsement
  deleteJobPost(jobPostID: ID!): JobPost
  deleteUser(userID: ID!): user
  generateApplicantCSV(end: String!, order: String!, start: String!, status: String!): [application]
  getDetailsFitlerAndSorting(category: String, jobType: String, location: String, workType: String): [jobDetails]
  getEndorseByCSV(end: String!, orders: orderedBy!, start: String!, status: String!, userID: ID): [company]
  getEndorsmentByCSV(end: String!, order: orderedBy, start: String!, status: String!): [endorsement]
  login(Auth: AuthInput): token
  updateAddressByProfileID(Address: AddressInput, profileID: ID!): [address]
  updateAllContentUserProfile(email: EmailAddress, profile: ProfileInput, userID: ID!): user
  updateApplicantStatus(applicantID: ID!, status: String!, userID: ID!): application
  updateComment(comment: commentInput, commentID: ID!): comment
  updateCompany(companyID: ID!): company
  updateEndorse(endorseID: ID!, endorseStatus: String!, userID: ID!): endorse
  updateEndorsement(Status: String!, endorsementID: ID!): endorsement
  updateJobPost(JobDetails: jobDetailsInput, JobPost: JobPostInput, jobPostID: ID!): JobPost
  updateJobPostStatus(jobPostID: ID!, status: jobStatus): JobPost
  updatePassword(userID: ID!): user
  updateProfile(Profile: ProfileInput, profileID: ID!): profile
  updateUserPassword(password: String!, retype: String!, userID: ID!): user
  viewMyApplication(email: EmailAddress!, id: String!): token
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

input ProfileInput {
  birthday: Date
  firstname: String
  lastname: String
  phone: PhoneNumber
}

type Query {
  getAddressQuery: [address]
  getAllApplication: [application]
  getAllApplicationDateCount: [countByGroup]
  getAllCompany: [company]
  getAllCountJob: [JobPost]
  getAllEndorse: [endorse]
  getAllEndorsementByGroup: [countByGroup]
  getAllFeedback: [feedback]
  getAllJobPost(limit: Int!, offset: Int!, order: orderedBy!): [JobPost]
  getAllNotification: [notification]
  getAllUser: [user]
  getApplicantByDWMY(select: String!): [countByGroup]
  getApplicantByID(applicationID: ID!): [application]
  getApplicationByStatus(limit: Int!, order: orderedBy!, status: String!): [application]
  getCompanyById(companyID: ID!): [company]
  getCompanyPartner: [company]
  getEmployerCompany(limit: Int!, offset: Int!): [company]
  getEmployerCompanyGroup: [countByGroup]
  getEndorseByID(endorseID: ID!): [endorse]
  getEndorseByStatus(limit: Int!, offset: Int!, order: orderedBy!, status: String!, userID: ID!): [endorse]
  getEndorsementAll: [endorsement]
  getEndorsementByDWMY(select: String!): [countByGroup]
  getEndorsementById(endorsementID: ID!): [endorsement]
  getEndorsementCommnet(endorsementID: ID!): [comment]
  getEndorsementFeedback(endorsementID: String!): [endorse]
  getEndorsementSpecificStatus(limit: Int!, offset: Int!, order: orderedBy, status: String!): [endorsement]
  getFindMyLocation(location: String): [jobDetails]
  getGroubyByJob: [countByGroup]
  getJobByStatus(offset: Int!, order: orderedBy, status: String!, take: Int!): [JobPost]
  getJobPostById(jobPostID: ID!): [JobPost]
  getJobPostDWMY(select: String!): [countByGroup]
  getJobPostSearch(search: String!): [JobPost]
  getJobRelated(category: String!, limit: Int!, offset: Int!): [jobDetails]
  getNotificationByStatus: [notification]
  getNotificationID(notificationID: ID!): [notification]
  getSpecificJob(category: String, jobType: [String], limit: Int!, offset: Int!, workType: [String]): [jobDetails]
  getUserByID(userID: ID!): [user]
  getUserByRoles(limit: Int!, offset: Int!, order: orderedBy, role: String): [user]
  getUserLogs(limit: Int!, offset: Int!, userID: ID!): [logs]
  jobQuery: [JobPost]
  profileQuery(userID: ID!): [profile]
}

type Subscription {
  NotificationSubscriptions: notification
  UserSubscriptions: user
  createAJobPostSubscriptions: JobPost
  createEndorsementSub: endorsement
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type address {
  addressID: ID
  city: String
  profile: [profile]
  province: String
  street: String
  zipcode: String
}

type application {
  applicantID: ID
  applicantInterviewer: [interviewer]
  applicantProfile: [profile]
  applicantUpload: [fileUpload]
  applyJobPost: [JobPost]
  createdAt: Date
  email: EmailAddress
  endorseFeedback: [feedback]
  id: String
  status: String
  updatedAt: Date
}

enum applicationStatus {
  awaiting
  contacted
  hired
  rejected
  reviewing
  reviwed
}

type comment {
  commentID: ID
  createdAt: Date
  message: String
  notes: String
  updatedAt: Date
}

input commentInput {
  message: String
  notes: String
}

type company {
  comapnyDetails: [company_details]
  companyID: ID
  companyName: String
  companyPost: [JobPost]
  endorse: [endorse]
  user: [user]
}

type company_details {
  company: [company]
  companyDetailsID: ID
  location: [address]
  mission: String
  vission: String
}

type countByGroup {
  _count: Int
  createdAt: Date
}

type endorse {
  company: [company]
  createdAt: Date
  endorseID: ID
  endorseStatus: String
  endorsement: [endorsement]
  feedback: [feedback]
  user: [user]
}

type endorsement {
  Status: String
  applicants: [application]
  createdAt: Date
  endorse: [endorse]
  endorseBy: [user]
  endorsementComment: [comment]
  endorsementID: ID
  updatedAt: Date
}

type feedback {
  createdAt: Date
  endorse: [endorse]
  feedback: String
  feedbackID: ID
  user: [user]
}

type fileUpload {
  createdAt: Date
  file: String
  uploadFileID: ID
  video: String
}

type interviewer {
  applicants: [application]
  createdAt: Date
  interviewerID: ID
  user: [user]
}

type jobDetails {
  category: String
  jobDetailsID: ID
  jobPost: [JobPost]
  jobType: [String]
  location: [String]
  salary: String
  workType: [String]
}

input jobDetailsInput {
  category: String!
  jobType: [String!]
  location: [String!]
  salary: String!
  workType: [String!]
}

enum jobStatus {
  approved
  rejected
}

type logs {
  createdAt: Date
  logsID: ID
  modifiedBy: String
  title: String
  updatedAt: Date
  users: [user]
}

type notification {
  createdAt: Date
  notificationID: ID
  notificationJob: [JobPost]
  notificationStatus: String
  title: String
  user: [user]
  userApplications: [application]
}

enum orderedBy {
  asc
  desc
}

type profile {
  birthday: Date
  firstname: String
  lastname: String
  phone: PhoneNumber
  profileAddress: [address]
  profileID: ID
  user: [user]
}

enum roles {
  administrator
  manager
  moderator
  recruiter
}

type token {
  token: String
}

type user {
  company: [company]
  createdAt: Date
  email: EmailAddress
  endorsement: [endorsement]
  logs: [logs]
  notification: [notification]
  profile: [profile]
  role: String
  updatedAt: Date
  userID: ID
}